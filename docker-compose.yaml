version: '3.8'

services:
  consul:
    image: consul:1.15
    container_name: consul
    networks:
      my-service-network:
        ipv4_address: 172.40.0.2
    ports:
      - "8500:8500"
    command: agent -dev -ui -client='0.0.0.0'
    restart: always

  kong-database:
    image: postgres
    container_name: kong-database
    networks:
      my-service-network:
        ipv4_address: 172.40.0.3
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - pg-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U kong" ]  # 检查PostgreSQL连接状态
      interval: 10s
      timeout: 5s
      retries: 3

  kong-migrations:
    image: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - my-service-network
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap
    restart: on-failure

  kong:
    image: kong
    container_name: kong
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
      consul:
        condition: service_started
    networks:
      my-service-network:
        ipv4_address: 172.40.0.4
    ports:
      - "8000:8000"
      - "9080:9080"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: 172.40.0.3
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_DNS_RESOLVER: 172.40.0.2:8600
      KONG_DNS_ORDER: SRV,LAST,A,CNAME
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl
    restart: always

  konga:
    image: pantsel/konga
    container_name: konga
    networks:
      my-service-network:
        ipv4_address: 172.40.0.5
    ports:
      - "1337:1337"
    depends_on:
      kong:
        condition: service_healthy
    restart: always

  etcd:
    image: bitnami/etcd:latest
    container_name: etcd
    networks:
      my-service-network:
        ipv4_address: 172.40.0.6
    ports:
      - "2379:2379"
      - "2380:2380"
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
    restart: always

  mysql:
    image: mysql:8.0
    container_name: mysql
    networks:
      my-service-network:
        ipv4_address: 172.40.0.7
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root123456
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]  # 检查MySQL是否存活
      interval: 10s  # 每10秒检查一次
      timeout: 5s    # 单次检查超时时间
      retries: 5     # 失败重试5次后标记为不健康
      start_period: 30s  # 容器启动后30秒开始检查

  canal-server:
    image: canal/canal-server:latest
    container_name: canal-server
    networks:
      my-service-network:
        ipv4_address: 172.40.0.8
    ports:
      - "11111:11111"
    environment:
      canal.instance.master.address: "172.40.0.7:3306"
      canal.instance.dbUsername: "root"
      canal.instance.dbPassword: "root123456"
      canal.mq.topic: "canal"
      canal.serverMode: "kafka"
      canal.mq.flatMessage: "true"
      kafka.bootstrap.servers: "159.75.1.200:9093"
    depends_on:
      mysql:
        condition: service_healthy
    restart: always

  redis:
    image: redis:7.2
    container_name: redis
    networks:
      my-service-network:
        ipv4_address: 172.40.0.9
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server /usr/local/etc/redis/redis.conf 
      --requirepass root123456
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "root123456", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  my-service-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.40.0.0/24

volumes:
  pg-data:
  mysql-data:
  redis-data: