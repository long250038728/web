** 对软件内部的结构进行改善，不改变软件的可见行为的情况下，使更容易理解，修改成本更低

目的
    对软件内部的结构进行改善，不改变软件的可见行为的情况下，使更容易理解，修改成本更低
        1.代码不断堆积，代码混乱会导致最终不可用
        2.功能不是一开始就设计好的，可能之后才发现有问题        
对象
    大型重构(系统，模块，代码结构，类与类之间的重构):
        分层，模块化，解耦，抽象可复用组件等（设计思想，原则，模式）
    小型重构(代码细节(类，函数，变量等代码级别的重构))
        命名规范，规范注释，消除超大类，提取重复代码等
时机
    持续重构，技术在更新，需求在变化，人员在流动，代码质量总会下降
        避免烂到一定程度后再集中重构
方法 
    大型重构（有组织 有计划，谨慎，熟悉业务）
        涉及代码模块较多，可能会牵一发而动全身
            有完善的重构计划，有条不絮的分阶段进行
            控制重构的影响范围，考虑好兼容老代码的逻辑，甚至兼容过度代码
    小型重构  
        单元测试，静态分析工具
        

-----

单元测试：（保证重构不出错）
    熟悉设计原则，思想，模式，对功能足够了解，除了个人因素外最有效的是单元测试
        如果新的代码也能通过单元测试则代表代码对原有逻辑的正确性未被破坏

什么是单元测试
    来测试一个类和函数是否按照预期逻辑执行，验证代码正确性。

为什么要写单元测试
    1.可以有效的发现代码中的bug
    2.代码的可测试，
        如果单元测试写起来很吃力，需要依靠测试框架里的很高级来完成，意味着代码不合理
            比如没有使用依赖注入，使用了大量静态函数，全局变量，代码高度耦合
    3.也是代码重构的过程
        编写代码重构就是相当代码review的过程

如何写单元测试
    对代码设计覆盖各种输入，异常，边界条件的测试用例

-----
    
代码的可测试
    1.不依赖其他工具（redis，mysql）
    2.不依赖第三方(不可控) 
    3.不应该走网络
    如需要依赖数据库，网络通信，文件系统，我们就需要把被测试的代码与外部系统依赖。这个解依赖的方法叫“mock”
        mock就是用一个假的服务代替一个真正服务。
            1.比如数据库，那通过继承的方式然后重写子类的方法直接返回模拟数据
            2.那如何替换数据库类，那就通过依赖注入的方式（桥接的方式传入而不是直接在类中init)    

什么是不可测试性代码
    1.代码不确定的（时间戳，数据库，随机数）
    2.全局变量/单例(避免不同的用例修改到该变量)
    3.复杂的继承（组合优于继承，避免层次深的继承）
    4.高耦合代码（应该要拆分，要单一职责）

-----

如何解耦
    1.封装及抽象(封装是对自己的类进行隐藏细节，抽象是对于调用发隐藏复杂的关系)
        可以隐藏实现的复杂性，隔离实现的易变性
    2.中间层
        A,B,C三个模块，引入中间层后只需依赖中间层模块，中间层里面的改动对外是透明的
            减少了依赖关系，让代码更加清晰
    3.模块化
        没有人能掌控所有的细节，让不同人负责不同模块
        不同模块通过api通信，像搭积木一样组装起来，构成一个复杂的系统
    4.其他设计思想及原则
        单一职责
        基于接口而非实现
        依赖注入
        组合优于继承
        迪米特法则（不要有直接的依赖关系）
        设计模式

-----

改善代码质量（编码规范）
    1.命名与注释
    2.代码风格
    3.编程技巧

命名
    1.长度（不推荐使用缩写，但不包括耳熟能详如str，num，sec）以能准确达意为目标
    2.利用上下文简化命名 避免 (new User).getUserName() 应该是 (new User).getName()
    3.命名可读可搜索（没有几个人能叫起这个名，还有避免不同的命名如新增有些用add，有些用insert）
    4.命名接口及抽象类（如加I(interface)，或impl(抽象类)）

注释（代码更容易看懂）
    1.做什么 2为什么 3怎么用

代码风格（项目中保持风格统一）
    1.类、函数
        不能太多，代码可读性差
        不能太少，类多难以维护
        1.一个函数不要超过一个屏幕
        2.一个类的代码读起来头大，实现某个功能不知道用哪个函数，用一个小功能要引用整个类，想用哪个函数找不到，就证明类的函数过多了
    2.一行代码长度
        最好在ide不换行
    3.用空行分割代码块
    4.用四个缩进还是两格缩进（取决个人喜好，项目统一）
    5.左大于号是否要另起一行（不另起一行）
    6.类中成员顺序（先静态后非静态，先private后public）

编程技巧
    1.把代码分割更小的模块化
    2.避免函数参数过多（大于等于5个可能过多，考虑函数是否职责单一看能否拆，把参数封装成对象）
    3.不要用函数的参数控制逻辑（违背单一原则）不一定
    4.函数设计要职责单一
    5.移除过深的嵌套层次
    6. 学会使用解释性变量（如 pi = 3.14159）

----