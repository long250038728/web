apiVersion: v1
kind: Service
metadata:
  name: stateful-set-service
spec:
  selector:
    name: stateful-set-service     #这里需要与pod中的selector.name相同，这里是去匹配pod的

  type: NodePort

  ports:            
  - port: 80          #暴露pod的port, pod的prot:容器的prot
    targetPort: 80
    protocol: TCP


---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: stateful-set-pv
spec:
  storageClassName: stateful-set-pv #pv手动管理所以名称随便
  accessModes:
  - ReadWriteMany # ReadWriteOnce可读写，只能被一个节点的pod挂载  ReadOnlyMany:可读，任意节点的pod挂载    ReadWriteMany:可读写，任意节点的pod挂载
  capacity:
    storage: 100Mi # 设备容量（用国际标准Ki/Mi/Gi）
  hostPath:
    path: /tmp/storage-class-name-100m/  #存储卷的本地路径,如果pod重建调度到其他node上，加载本地目录，也不会是之前存储的位置

---


apiVersion: v1
kind: PersistentVolumeClaim  #根据storageClassName与storage去匹配PV,找到即匹配
metadata:
  name: stateful-set-pvc  
spec:
  storageClassName: stateful-set-pv #pv相同
  accessModes:
  - ReadWriteMany # ReadWriteOnce可读写，只能被一个节点的pod挂载  ReadOnlyMany:可读，任意节点的pod挂载    ReadWriteMany:可读写，任意节点的pod挂载
  resources:
    requests:
      storage: 10Mi #希望有多大的容量

---


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stateful-set-demo

spec:
  volumeClaimTemplates:   #pvc
  - metadata:
      name: pvc
    spec:
      storageClassName: stateful-set-pv
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 10Mi

  serviceName: stateful-set-service   #statefulSet
  replicas: 2
  selector:
    matchLabels:
      app: stateful-set-service    
  
  #pod
  template:
    metadata:
      labels:
        app: stateful-set-service  
    spec:
      containers:
      - image: redis
        name: redis

        ports:                #使用ports
        - containerPort: 6379

        volumeMounts:         #使用volume
        - name: pvc
          mountPath: /data