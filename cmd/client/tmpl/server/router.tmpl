package router

import (
	"github.com/gin-gonic/gin"
	"{{.Page}}/{{.Server}}/internal/service"
	"{{.Protoc}}/{{.Server}}"
	"github.com/long250038728/web/tool/app"
	"github.com/long250038728/web/tool/server/http/gateway"
	"google.golang.org/grpc"
	"google.golang.org/grpc/health/grpc_health_v1"
)

func RegisterHTTPServer(engine *gin.Engine, srv *service.Service) {
	cache, _ := app.NewUtil().Cache()
	xxxGroup := engine.Group("/{{.Server}}/xxx/").Use(gateway.BaseHandle(cache))
	{
		xxxGroup.GET("xxx", func(c *gin.Context) {
			//gateway.Json(c, &{{.Server}}.xxxRequest{}).Use(gateway.Limit(), gateway.Cache()).Handle(func(ctx context.Context, req any) (any, error) {
			//	return srv.XXX(ctx, req.(*{{.Server}}.xxxRequest))
			//})
		})
	}
}

func RegisterGRPCServer(engine *grpc.Server, srv *service.Service) {
	{{.Server}}.Register{{serverNameFunc .Server}}Server(engine, srv)
	grpc_health_v1.RegisterHealthServer(engine, srv)
}
