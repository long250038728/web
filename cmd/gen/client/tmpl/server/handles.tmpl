package handles

import (
	"context"
	"github.com/gin-gonic/gin"
	"{{.Page}}/{{.Server}}/internal/service"
	"{{.Protoc}}/{{.Server}}"
	"github.com/long250038728/web/tool/app"
	"github.com/long250038728/web/tool/server/http/gateway"
	"github.com/long250038728/web/tool/server/http/gateway/middleware"
	"google.golang.org/grpc"
	"google.golang.org/grpc/health/grpc_health_v1"
)

type Handles struct {
	util *app.Util
}

func NewHandles(util *app.Util) *Handles {
	return &Handles{util: util}
}

func (r *Handles) RegisterHTTPServer(engine *gin.Engine, srv *service.{{serverNameFunc .Server}}) {
	authorized, err := r.util.Auth()
    if err != nil {
   		panic(err)
   	}

	// 服务/领域/接口
	xxxGroup := engine.Group("/{{.Server}}/xxx/").Use(middleware.BaseHandle(authorized))
	{
		xxxGroup.GET("xxx", func(c *gin.Context) {
            //gateway.Json(c, &{{.Server}}.xxxRequest{}).Use(
            //	middleware.Login(),
            //).Handle(func(ctx context.Context, req any) (any, error) {
            //	return srv.XXX(ctx, req.(*{{.Server}}.xxxRequest))
            //})
		})
	}
}

func (r *Handles) RegisterGRPCServer(engine *grpc.Server, srv *service.{{serverNameFunc .Server}}) {
	{{.Server}}.Register{{serverNameFunc .Server}}Server(engine, srv)
	grpc_health_v1.RegisterHealthServer(engine, srv)
}
